import telebot
from telebot import types
import sqlite3
from datetime import datetime

TOKEN = '7709800436:AAG9zdInNqWmU-TW7IuzioHhy_McWnqLw0w'
bot = telebot.TeleBot(TOKEN)

def get_db():
    conn = sqlite3.connect('users_fresh.db', check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER UNIQUE,
        first_name TEXT,
        last_name TEXT,
        middle_name TEXT,
        phone TEXT,
        school INTEGER,
        class INTEGER,
        register_date TEXT
    )''')
    conn.commit()
    conn.close()

init_db()

def show_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton('–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'),
        types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å'),
        types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å')
    )
    bot.send_message(chat_id, reply_markup=markup)

@bot.message_handler(commands=['start'])
def start(message):
    conn = get_db()
    user = conn.execute('SELECT * FROM users WHERE user_id=?', (message.from_user.id,)).fetchone()
    conn.close()
    if user:
        bot.send_message(message.chat.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.')
        show_main_menu(message.chat.id)
    else:
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:')
        bot.register_next_step_handler(msg, process_last_name)

def process_last_name(message):
    last_name = message.text.strip()
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
    bot.register_next_step_handler(msg, lambda m: process_first_name(m, last_name))

def process_first_name(message, last_name):
    first_name = message.text.strip()
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ:')
    bot.register_next_step_handler(msg, lambda m: process_middle_name(m, last_name, first_name))

def process_middle_name(message, last_name, first_name):
    middle_name = message.text.strip()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True))
    msg = bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:', reply_markup=markup)
    bot.register_next_step_handler(msg, lambda m: process_phone(m, last_name, first_name, middle_name))

def process_phone(message, last_name, first_name, middle_name):
    if message.contact and message.contact.phone_number:
        phone = message.contact.phone_number
    else:
        phone = message.text.strip()
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π —à–∫–æ–ª—ã (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä 50):', reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, lambda m: process_school(m, last_name, first_name, middle_name, phone))

def process_school(message, last_name, first_name, middle_name, phone):
    school = message.text.strip()
    if not school.isdigit() or not (1 <= int(school) <= 999):
        msg = bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —à–∫–æ–ª—ã —Ü–∏—Ñ—Ä–∞–º–∏ (–æ—Ç 1 –¥–æ 999):')
        return bot.register_next_step_handler(msg, lambda m: process_school(m, last_name, first_name, middle_name, phone))
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å (–æ—Ç 1 –¥–æ 11):')
    bot.register_next_step_handler(msg, lambda m: process_class(m, last_name, first_name, middle_name, phone, int(school)))

def process_class(message, last_name, first_name, middle_name, phone, school):
    class_num = message.text.strip()
    if not class_num.isdigit() or not (1 <= int(class_num) <= 11):
        msg = bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å –æ—Ç 1 –¥–æ 11:')
        return bot.register_next_step_handler(msg, lambda m: process_class(m, last_name, first_name, middle_name, phone, school))
    conn = get_db()
    conn.execute('INSERT INTO users (user_id, first_name, last_name, middle_name, phone, school, class, register_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
                 (message.from_user.id, first_name, last_name, middle_name, phone, school, int(class_num), datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
    show_main_menu(message.chat.id)

@bot.message_handler(func=lambda m: m.text and m.text.lower() == '–º–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
def show_profile(message):
    conn = get_db()
    user = conn.execute('SELECT * FROM users WHERE user_id=?', (message.from_user.id,)).fetchone()
    conn.close()
    if user:
        profile = f"""
üìå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

üë§ –§–ò–û: {user['last_name']} {user['first_name']} {user['middle_name']}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}
üè´ –®–∫–æ–ª–∞: {user['school']}
üéí –ö–ª–∞—Å—Å: {user['class']}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user['register_date']}
        """
        bot.send_message(message.chat.id, profile)
    else:
        bot.send_message(message.chat.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start.')

@bot.message_handler(func=lambda m: m.text and m.text.lower() == '–∏–∑–º–µ–Ω–∏—Ç—å')
def edit_profile(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–û—Ç—á–µ—Å—Ç–≤–æ', '–¢–µ–ª–µ—Ñ–æ–Ω', '–®–∫–æ–ª–∞', '–ö–ª–∞—Å—Å', '–ù–∞–∑–∞–¥')
    msg = bot.send_message(message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=markup)
    bot.register_next_step_handler(msg, process_edit_choice)

def process_edit_choice(message):
    field = message.text.lower()
    if field == '–∏–º—è':
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, lambda m: save_edit(m, 'first_name'))
    elif field == '—Ñ–∞–º–∏–ª–∏—è':
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é:', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, lambda m: save_edit(m, 'last_name'))
    elif field == '–æ—Ç—á–µ—Å—Ç–≤–æ':
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ:', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, lambda m: save_edit(m, 'middle_name'))
    elif field == '—Ç–µ–ª–µ—Ñ–æ–Ω':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True))
        msg = bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:', reply_markup=markup)
        bot.register_next_step_handler(msg, lambda m: save_edit(m, 'phone'))
    elif field == '—à–∫–æ–ª–∞':
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —à–∫–æ–ª—ã (–æ—Ç 1 –¥–æ 999):', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, lambda m: save_edit(m, 'school'))
    elif field == '–∫–ª–∞—Å—Å':
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å (–æ—Ç 1 –¥–æ 11):', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, lambda m: save_edit(m, 'class'))
    elif field == '–Ω–∞–∑–∞–¥':
        show_main_menu(message.chat.id)
    else:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        edit_profile(message)

def save_edit(message, field):
    user_id = message.from_user.id
    value = None
    if field == 'phone':
        if message.contact and message.contact.phone_number:
            value = message.contact.phone_number
        else:
            value = message.text.strip()
    else:
        value = message.text.strip()
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if field == 'school':
        if not value.isdigit() or not (1 <= int(value) <= 999):
            msg = bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —à–∫–æ–ª—ã —Ü–∏—Ñ—Ä–∞–º–∏ (–æ—Ç 1 –¥–æ 999):')
            return bot.register_next_step_handler(msg, lambda m: save_edit(m, 'school'))
        value = int(value)
    if field == 'class':
        if not value.isdigit() or not (1 <= int(value) <= 11):
            msg = bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å –æ—Ç 1 –¥–æ 11:')
            return bot.register_next_step_handler(msg, lambda m: save_edit(m, 'class'))
        value = int(value)
    conn = get_db()
    conn.execute(f'UPDATE users SET {field}=? WHERE user_id=?', (value, user_id))
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, '‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
    show_main_menu(message.chat.id)

@bot.message_handler(func=lambda m: m.text and m.text.lower() == '—É–¥–∞–ª–∏—Ç—å')
def delete_profile(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('–î–∞, —É–¥–∞–ª–∏—Ç—å', '–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞')
    msg = bot.send_message(message.chat.id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.', reply_markup=markup)
    bot.register_next_step_handler(msg, confirm_delete)

def confirm_delete(message):
    if message.text.lower().startswith('–¥–∞'):
        user_id = message.from_user.id
        conn = get_db()
        conn.execute('DELETE FROM users WHERE user_id=?', (user_id,))
        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª—ë–Ω. –î–ª—è –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ /start.', reply_markup=types.ReplyKeyboardRemove())
    else:
        bot.send_message(message.chat.id, '–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
        show_main_menu(message.chat.id)

if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
    bot.infinity_polling() 