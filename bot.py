import telebot
from datetime import datetime
import time
from telebot import types
import sqlite3
import hashlib
import os

def hash_password(password):
    return hashlib.sha256(password.encode('utf-8')).hexdigest()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('users.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('''CREATE TABLE IF NOT EXISTS users
             (id INTEGER PRIMARY KEY AUTOINCREMENT,
             user_id INTEGER UNIQUE,
             first_name TEXT,
             last_name TEXT,
             middle_name TEXT,
             phone TEXT,
             school TEXT,
             class TEXT,
             password_hash TEXT,
             tg TEXT,
             register_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    conn.commit()
    return conn, cursor

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn, cursor = init_db()

# –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN', '7709800436:AAG9zdInNqWmU-TW7IuzioHhy_McWnqLw0w')
bot = telebot.TeleBot(TOKEN)


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ –≤ init_db()

def get_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–í–æ–π—Ç–∏"), types.KeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"))
    return markup

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    updated = False
    with sqlite3.connect('users.db', check_same_thread=False) as conn:
        cursor = conn.cursor()
        if message.from_user.username:
            username = message.from_user.username.lstrip('@')
            cursor.execute(
                "UPDATE users SET user_id=? WHERE tg=? AND (user_id IS NULL OR user_id='')",
                (message.from_user.id, username)
            )
            if cursor.rowcount > 0:
                updated = True
        if not updated and message.contact:
            cursor.execute(
                "UPDATE users SET user_id=? WHERE phone=? AND (user_id IS NULL OR user_id='')",
                (message.from_user.id, message.contact.phone_number)
            )
            if cursor.rowcount > 0:
                updated = True
        conn.commit()
    print(f"[DEBUG] user_id update on /start: username={message.from_user.username}, id={message.from_user.id}, updated={updated}")
    msg = bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )
    bot.register_next_step_handler(msg, process_start_choice)

def process_start_choice(message):
    choice = message.text.strip().lower()
    if "–≤–æ–π—Ç–∏" in choice:
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –≤—Ö–æ–¥–∞:", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, process_login_phone)
    elif "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä" in choice:
        start_registration(message)
    else:
        msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–í–æ–π—Ç–∏' –∏–ª–∏ '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'.")
        bot.register_next_step_handler(msg, process_start_choice)

def process_login_phone(message):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        return start(message)
    with sqlite3.connect('users.db', check_same_thread=False) as conn:
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE phone = ?", (message.text.strip(),))
    user = cursor.fetchone()
    if user:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:", reply_markup=markup)
        bot.register_next_step_handler(msg, lambda m: process_login_password_by_phone(m, user))
    else:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ —Å–∞–π—Ç –∏–ª–∏ –±–æ—Ç–∞.")
        start(message)

def process_login_password_by_phone(message, user):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        return start(message)
    password = message.text
    password_hash = hash_password(password)
    if password_hash == user['password_hash']:
        # –û–±–Ω–æ–≤–ª—è–µ–º user_id –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with sqlite3.connect('users.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute("UPDATE users SET user_id=? WHERE phone=?", (message.from_user.id, user['phone']))
            conn.commit()
        bot.send_message(message.chat.id, "‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!", reply_markup=types.ReplyKeyboardRemove())
        show_menu(message)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        msg = bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", reply_markup=markup)
        bot.register_next_step_handler(msg, lambda m: process_login_password_by_phone(m, user))

# –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def start_registration(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    msg = bot.send_message(message.chat.id, "–î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_last_name)

def process_last_name(message):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        return start(message)
    last_name = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    msg = bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=markup)
    bot.register_next_step_handler(msg, lambda m: process_first_name(m, last_name))

def process_first_name(message, last_name):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        return start(message)
    first_name = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ:", reply_markup=markup)
    bot.register_next_step_handler(msg, lambda m: process_middle_name(m, last_name, first_name))

def process_middle_name(message, last_name, first_name):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        return start(message)
    middle_name = message.text
    
    keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    reg_button = types.KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    keyboard.add(reg_button)
    keyboard.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    
    msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=keyboard)
    bot.register_next_step_handler(msg, lambda m: process_phone(m, last_name, first_name, middle_name))

def process_phone(message, last_name, first_name, middle_name):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        return start(message)
    if message.contact:
        phone = message.contact.phone_number
    else:
        phone = message.text
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    with sqlite3.connect('users.db', check_same_thread=False) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT 1 FROM users WHERE phone = ?", (phone,))
        exists = cursor.fetchone()
    if exists:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        msg = bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.", reply_markup=markup)
        return bot.register_next_step_handler(msg, lambda m: process_phone(m, last_name, first_name, middle_name))
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π —à–∫–æ–ª—ã:", reply_markup=markup)
    bot.register_next_step_handler(msg, lambda m: process_school(m, last_name, first_name, middle_name, phone))

def process_school(message, last_name, first_name, middle_name, phone):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        return start(message)
    school = message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —à–∫–æ–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 9999
    if not school.isdigit() or not (1 <= int(school) <= 9999):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —à–∫–æ–ª—ã —Ü–∏—Ñ—Ä–∞–º–∏ (–æ—Ç 1 –¥–æ 9999):", reply_markup=markup)
        return bot.register_next_step_handler(msg, lambda m: process_school(m, last_name, first_name, middle_name, phone))
    # Proceed to class selection
    markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    buttons = [types.KeyboardButton(str(i)) for i in range(1, 12)]
    markup.add(*buttons)
    markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å:", reply_markup=markup)
    bot.register_next_step_handler(msg, lambda m: process_class(m, last_name, first_name, middle_name, phone, school))


def process_class(message, last_name, first_name, middle_name, phone, school):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        return start(message)
    class_num = message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –∫–ª–∞—Å—Å —Ç–æ–ª—å–∫–æ –æ—Ç 1 –¥–æ 11
    if not class_num.isdigit() or not (1 <= int(class_num) <= 11):
        markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
        buttons = [types.KeyboardButton(str(i)) for i in range(1, 12)]
        markup.add(*buttons)
        markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –æ—Ç 1 –¥–æ 11:", reply_markup=markup)
        return bot.register_next_step_handler(msg, lambda m: process_class(m, last_name, first_name, middle_name, phone, school))
    # –ü–æ—Å–ª–µ –∫–ª–∞—Å—Å–∞ ‚Äî –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    msg = bot.send_message(message.chat.id, "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞:", reply_markup=markup)
    bot.register_next_step_handler(msg, lambda m: process_password1(m, last_name, first_name, middle_name, phone, school, class_num))

def process_password1(message, last_name, first_name, middle_name, phone, school, class_num):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        return start(message)
    password1 = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    msg = bot.send_message(message.chat.id, "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", reply_markup=markup)
    bot.register_next_step_handler(msg, lambda m: process_password2(m, last_name, first_name, middle_name, phone, school, class_num, password1))

def process_password2(message, last_name, first_name, middle_name, phone, school, class_num, password1):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        return start(message)
    password2 = message.text
    if password1 != password2:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        msg = bot.send_message(message.chat.id, "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å:", reply_markup=markup)
        return bot.register_next_step_handler(msg, lambda m: process_password1(m, last_name, first_name, middle_name, phone, school, class_num))
    password_hash = hash_password(password1)
    try:
        print('–ü–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î...')
        with sqlite3.connect('users.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users'")
            if not cursor.fetchone():
                print("–û–®–ò–ë–ö–ê: –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                # –°–æ–∑–¥–∞–¥–∏–º —Ç–∞–±–ª–∏—Ü—É
                cursor.execute('''CREATE TABLE users
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      user_id INTEGER UNIQUE,
                      first_name TEXT,
                      last_name TEXT,
                      middle_name TEXT,
                      phone TEXT,
                      school TEXT,
                      class TEXT,
                      password_hash TEXT,
                      tg TEXT,
                      register_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
                conn.commit()
                print("–¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞!")
            
            print(f"DEBUG: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}, password_hash: {password_hash}")
            print(f"DEBUG: –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏: user_id={message.from_user.id}, first_name={first_name}, last_name={last_name}, middle_name={middle_name}, phone={phone}, school={school}, class={class_num}")
            
            cursor.execute(
                "INSERT INTO users (user_id, first_name, last_name, middle_name, phone, school, class, register_date, password_hash) VALUES (?, ?, ?, ?, ?, ?, ?, datetime('now'), ?)",
                (message.from_user.id, first_name, last_name, middle_name, phone, school, class_num, password_hash)
            )
            conn.commit()
            print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
            cursor.execute("SELECT * FROM users WHERE user_id=?", (message.from_user.id,))
            added_user = cursor.fetchone()
            if added_user:
                print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î —Å ID: {added_user[0]}")
            else:
                print("–û–®–ò–ë–ö–ê: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏!")
            
            bot.send_message(message.chat.id, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=types.ReplyKeyboardRemove())
            show_menu(message)
    except Exception as e:
        import traceback
        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', traceback.format_exc())
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def show_menu(message):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn_profile = types.KeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    btn_edit = types.KeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    btn_delete = types.KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
    markup.add(btn_profile, btn_edit, btn_delete)
    
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è
@bot.message_handler(func=lambda message: message.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
def show_profile(message):
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (message.from_user.id,))
    user = cursor.fetchone()
    if user:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        register_date = user[7]
        if register_date and str(register_date).lower() != 'none':
            try:
                if isinstance(register_date, str):
                    dt = datetime.strptime(register_date, "%Y-%m-%d %H:%M:%S")
                else:
                    dt = datetime.fromtimestamp(time.mktime(register_date))
                register_date = dt.strftime("%d.%m.%Y %H:%M")
            except:
                register_date = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        else:
            register_date = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∫–æ–ª—ã
        school = user[5]
        if not school or str(school).lower() == 'none':
            school = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        # –§–ò–û: —Ñ–∞–º–∏–ª–∏—è, –∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ
        profile_text = f"""
üìå <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>:

üë§ <b>–§–ò–û:</b> {user[3]} {user[2]} {user[8]}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user[4]}
üè´ <b>–®–∫–æ–ª–∞:</b> {school}
üéí <b>–ö–ª–∞—Å—Å:</b> {user[6]}
üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {register_date}
        """
        bot.send_message(message.chat.id, profile_text, parse_mode='HTML')
    else:
        bot.send_message(message.chat.id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@bot.message_handler(func=lambda message: message.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
def edit_profile(message):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    btn1 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
    btn2 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω")
    btn3 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —à–∫–æ–ª—É")
    btn4 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å")
    btn_back = types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    markup.add(btn1, btn2, btn3, btn4, btn_back)
    
    bot.send_message(message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text.startswith("–ò–∑–º–µ–Ω–∏—Ç—å"))
def select_field_to_edit(message):
    field = message.text.replace("–ò–∑–º–µ–Ω–∏—Ç—å ", "").lower()
    
    if field == "—Ç–µ–ª–µ—Ñ–æ–Ω":
        keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        reg_button = types.KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)
        keyboard.add(reg_button)
        msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=keyboard)
    else:
        msg = bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field}:",
                             reply_markup=types.ReplyKeyboardRemove())
    
    bot.register_next_step_handler(msg, lambda m: update_profile(m, field))

def update_profile(message, field):
    try:
        new_value = message.contact.phone_number if field == "—Ç–µ–ª–µ—Ñ–æ–Ω" and message.contact else message.text
        user_id = message.from_user.id
        db_field = {
            "–∏–º—è": "first_name",
            "–æ—Ç—á–µ—Å—Ç–≤–æ": "middle_name",
            "—Ç–µ–ª–µ—Ñ–æ–Ω": "phone",
            "—à–∫–æ–ª—É": "school",
            "–∫–ª–∞—Å—Å": "class"
        }.get(field)
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —à–∫–æ–ª—ã –∏ –∫–ª–∞—Å—Å–∞
        if db_field == "school":
            if not new_value.isdigit() or not (1 <= int(new_value) <= 9999):
                msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —à–∫–æ–ª—ã —Ü–∏—Ñ—Ä–∞–º–∏ (–æ—Ç 1 –¥–æ 9999):")
                return bot.register_next_step_handler(msg, lambda m: update_profile(m, field))
        if db_field == "class":
            if not new_value.isdigit() or not (1 <= int(new_value) <= 11):
                msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –æ—Ç 1 –¥–æ 11:")
                return bot.register_next_step_handler(msg, lambda m: update_profile(m, field))
        if db_field:
            cursor.execute(f"UPDATE users SET {db_field} = ? WHERE user_id = ?", (new_value, user_id))
            conn.commit()
            bot.send_message(message.chat.id, f"‚úÖ {field.capitalize()} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
            show_menu(message)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")

# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@bot.message_handler(func=lambda message: message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
def confirm_delete(message):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    btn_yes = types.KeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å")
    btn_no = types.KeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å")
    markup.add(btn_yes, btn_no)
    
    bot.send_message(message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã.", 
                    reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å")
def delete_profile(message):
    try:
        cursor.execute("DELETE FROM users WHERE user_id = ?", (message.from_user.id,))
        conn.commit()
        bot.send_message(message.chat.id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω. –î–ª—è –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ /start", 
                        reply_markup=types.ReplyKeyboardRemove())
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
@bot.message_handler(func=lambda message: message.text in ["‚Ü©Ô∏è –ù–∞–∑–∞–¥", "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å"])
def back_to_menu(message):
    show_menu(message)

@bot.message_handler(func=lambda m: m.text and not m.text.startswith('/') and m.text not in ["–í–æ–π—Ç–∏", "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "‚Ü©Ô∏è –ù–∞–∑–∞–¥", "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å"])
def save_user_message(message):
    try:
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute('INSERT INTO messages (user_id, sender, message) VALUES (?, ?, ?)', (message.from_user.id, 'user', message.text))
        conn.commit()
        conn.close()
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}')

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()